import MTC/lab12/NVM;
import MTC/lab11/ast2str;

export
{
    NeMoProg2NVM(program : Program) -> VMProgram;
    NeMoProg2NVMCheckRs(program : Program) -> Maybe<VMProgram>;
    NeMoFile2NVM(filename : string) -> VMProgram;
    NeMoFile2NVMCheckRs(filename : string) -> Maybe<VMProgram>;
    NeMoStr2NVM(nemo : string) -> VMProgram;
    NeMoStr2NVMCheckRs(nemo : string) -> Maybe<VMProgram>;
}

NeMoProg2NVM(program)
{
    VMProgram(program.declarations,body2LabeledOperatorsTree(program.body));
}

NeMoProg2NVMCheckRs(program)
{
    errors = checkErrors(program);
    if ("" != errors)
    {
        println(errors);
        None();
    }
    else
        Some(NeMoProg2NVM(program));
}

NeMoFile2NVM(filename)
{
    NeMoProg2NVM(parseNeMoFile(filename));
}

NeMoFile2NVMCheckRs(filename)
{
    NeMoProg2NVMCheckRs(parseNeMoFile(filename));
}

NeMoStr2NVM(nemo)
{
    NeMoProg2NVM(parseNeMo(nemo));
}

NeMoStr2NVMCheckRs(nemo)
{
    NeMoProg2NVMCheckRs(parseNeMo(nemo));
}

body2LabeledOperatorsTree(body)
{
    labeledOperators = body2LabeledOperators1(body,0,None());
    makeLabeledOperatorsTree(labeledOperators,getEmptiesLabelsAndGotosTree(labeledOperators));
}

getEmptiesLabelsAndGotosTree(labeledOperators)
{
    foldi(labeledOperators,makeTree(),\i,emptiesLabelsAndReplacementsTree,labeledOperator ->
        {
            switch(labeledOperator : LabeledOperator)
            {
                LabeledEmpty(label,goto) :
                {
                    if (0 != i)
                        setTree(emptiesLabelsAndReplacementsTree,label,goto)
                    else
                        emptiesLabelsAndReplacementsTree;
                }
                default : emptiesLabelsAndReplacementsTree;
            }
        });
}

body2LabeledOperators1(body : Body, label, choiceWhileGoto : Maybe<int>) -> [LabeledOperator]
{
    switch(body)
    {
        Assignment(varApply,expr) : [LabeledAssignment(label,body,[either(choiceWhileGoto,label + 1)])];
        Test() : test2LabeledOperators(body,label,choiceWhileGoto);
        Sequence(bodies) : 
        {
            foldi(bodies,[],\i,labeledOperators,body1 ->
            {
                bodyAsLabeledOperators = body2LabeledOperators1(body1,label + length(labeledOperators),
                    if (i == length(bodies) - 1) choiceWhileGoto else None());
                concat(labeledOperators,bodyAsLabeledOperators);
            });
        }
        Choice(bodies) : 
        {
            choiceGoto = label + getNumberOfOperators(bodies) + 1; // + 1 because of head Empty
            gotoForHeadEmpty = ref [];
            choiceBodiesAsLabeledOperators = fold(bodies,[],\labeledOperators,choiceBody ->
            {
                nextLabel = label + length(labeledOperators) + 1;
                bodyAsLabeledOperators = body2LabeledOperators1(choiceBody,nextLabel,Some(choiceGoto));
                if (0 != length(bodyAsLabeledOperators))
                    refArrayPush(gotoForHeadEmpty,nextLabel);
                concat(labeledOperators,bodyAsLabeledOperators);
            });
            concat([LabeledEmpty(label,^gotoForHeadEmpty)],
                arrayPush(choiceBodiesAsLabeledOperators,LabeledEmpty(choiceGoto,[either(choiceWhileGoto,choiceGoto + 1)])));
        }
        Iteration(sequence) : 
        {
            sequenceAsLabeledOperators = body2LabeledOperators1(sequence,label,choiceWhileGoto);
            if (0 == length(sequenceAsLabeledOperators))
                []
            else
            {
                sequenceLength = length(sequenceAsLabeledOperators);
                lastOperator = sequenceAsLabeledOperators[sequenceLength - 1];
                arrayPush(removeIndex(sequenceAsLabeledOperators,sequenceLength - 1),addToGoto(lastOperator,label));
            }
        }
        Function() : [];
    }
}   

test2LabeledOperators(test, label, choiceWhileGoto : Maybe<int>)
{
    switch (test : Test)
    {
        SimpleTest(relation) : [LabeledTest(label,relation,[label + 1],[]),
            LabeledEmpty(label + 1,[either(choiceWhileGoto,label + 2)])]
        While(relation,body) :
        {
            bodyAsLabeledOperators = body2LabeledOperators1(body,label + 1,Some(label));
            bodyLength = length(bodyAsLabeledOperators);
            concat([LabeledTest(label,relation,[label + 1], if (0 != bodyLength) [label + bodyLength + 1] else [])],
                arrayPush(bodyAsLabeledOperators,
                    LabeledEmpty(label + bodyLength + 1,[either(choiceWhileGoto,label + bodyLength + 2)])));
        }
        If(relation,op_if,op_else) :
        {
            tailLabeledEmptyLabel = label + getNumberOfOperatorsInBody(op_if) + getNumberOfOperators(op_else) + 1;
            opIfAsLabeledOperators = body2LabeledOperators1(op_if,label + 1,Some(tailLabeledEmptyLabel));
            opElseAsLabeledOperators =
                if (1 == length(op_else))
                    body2LabeledOperators1(op_else[0],label + length(opIfAsLabeledOperators) + 1,Some(tailLabeledEmptyLabel))
                else
                    [];
            concat(concat([LabeledTest(label,relation,[label + 1],[label + length(opIfAsLabeledOperators) + 1])],
                    opIfAsLabeledOperators),arrayPush(opElseAsLabeledOperators,
                        LabeledEmpty(tailLabeledEmptyLabel,
                            [either(choiceWhileGoto,tailLabeledEmptyLabel + 1)])));
        }
    }
}

getNumberOfOperators(bodies)
{
    fold(bodies,0,\acc,body -> acc + getNumberOfOperatorsInBody(body));
}

getNumberOfOperatorsInBody(body)
{
    switch(body : Body)
    {
        Assignment(varApply,expr) : 1;
        Test() :
            switch(body : Test)
            {
                SimpleTest(relation) : 2;
                If(relation,op_if,op_else) : 2 + getNumberOfOperatorsInBody(op_if) + getNumberOfOperators(op_else);
                While(relation,body1) : 2 + getNumberOfOperatorsInBody(body1);
            }
        Sequence(bodies) : getNumberOfOperators(bodies);
        Iteration(sequence) : getNumberOfOperatorsInBody(sequence);
        Choice(bodies) : getNumberOfOperators(bodies) + 2; // + 2 because of head and tail Empty Operators
        Function() : 0;
    }
}

addToGoto(labeledOperator,addGoto)
{
    switch(labeledOperator : LabeledOperator)
    {
        LabeledTest(label,relation,if_goto,else_goto) : labeledOperator; //should not happen
        LabeledAssignment(label,assignment,goto) : LabeledAssignment(label,assignment,concat([addGoto],goto));
        LabeledEmpty(label,goto) : LabeledEmpty(label,concat([addGoto],goto));
    }
}

/*
    недетерминированный выбор должен начинаться с пустого оператора, чтобы предыдущему оператору не пришлось менять goto
    (также в случае, когда этот выбор вложен в итерацию, отстуствие пустого оператора в начале сильно усложнло бы жизнь)

    x := 1;
    {
	    x := x + 1 U
	    x := x - 1
    };

    недетерминированный выбор должен заканчиваться на пустом операторе,
    чтобы всем телам выбора не пришлось менять goto в случае, когда этот выбор вложен в итерацию

    {
        {
	        y := y U
	        y := -1 * y
        };
    }*

    все тесты аналогично должны заканчиваться пустым оператором для корректности работы случая, когда
    они вложены в итерацию или недетерминированный выбор (кроме случая goto {})

    {
        while (x > 3)
        {
            x := x + 1;
        }
    }*

    ->

    0: if (x > 3) then {2} else {1}
    1: x := x + 1 goto {0}
    2: goto {0,3}

    {
        (x > 3) ? U
        x := x + 1
    }

    ->

    0 goto {1,2}
    1: if (x > 3) then {2} else {}
    2: goto {4}
    3: x := x + 1 goto {4}
*/
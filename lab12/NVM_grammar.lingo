nvm = declarations:decls ws* (assignment | test)*:operators
    {VMProgram(:decls,buildLabeledOperatorsTree(:operators))};

declarations = '{' declaration*:decls '}' {:decls} | declaration*;
declaration = "VAR" ws var:v ws* ':' ws* type:t ';' ws+ {Declaration(:v,:t)};
type = "INT" {IntType()}
    | '[' type:ind ws+ "ARRAY" ws+ "OF" ws+ type:val ']' {ArrayType(:ind,:val)}
    | '[' type:t ']' {ArrayType(:t,IntType())};

assignment = int:label ws* ':' ws* apply_var:av ws* ":=" expr:e
    ws* ("goto" | "->") goto:goto {GrammarAssignment(:label,Assignment(:av,:e),:goto)};
test = int:label ws* ':' ws* "if" ws* '(' ws* or:or ws* ')' ws*
    "then" goto:op_if "else" goto:op_else {GrammarTest(:label,:or,:op_if,:op_else)};

expr = update | arithmetic;

arithmetic = sub:s ws* '+' ws* arithmetic:a {Add(:s,:a)} | sub;
sub = prod:p subsub*:s {buildSub(:p,:s)}; 
subsub = ws* '-' prod:p {:p};
prod = div:d ws* '*' ws* prod:p {Product(:d,:p)} | div;
div = neg:n subdiv*:d {buildDiv(:n,:d)};
subdiv = ws* '/' neg:n {:n};
neg = ws* '-' neg:n {Neg(:n)} | parentheses;
parentheses = ws* '(' ws* arithmetic:a ws* ')' {:a} | ws* operand;

apply = ws* "APP(" (update | apply_var):array ',' ws? expr:index ')' {Apply(:array,:index)}
     | ws* (update | var):array '[' expr:index ']' {Apply(:array,:index)};
update = ws* "UPD(" (update | apply_var):array ',' ws? expr:index ',' ws? expr:new_value ')'
    {Update(:array,:index,:new_value)}; 

or = and:and ws+ "||" ws+ or:or {Or(:and,:or)} | and;
and = not:not ws+ "&&" ws+ and:and {And(:not,:and)} | not;
not = '~' ws* relation_atom:ra {Not(:ra)} | relation_atom;
relation_atom = arithmetic:a1 ws* "<=" ws* arithmetic:a2 {LesserEquals(:a1,:a2)}
    | arithmetic:a1 ws* ">=" ws* arithmetic:a2 {GreaterEquals(:a1,:a2)}
    | arithmetic:a1 ws* '<' ws* arithmetic:a2 {Lesser(:a1,:a2)}
    | arithmetic:a1 ws* '>' ws* arithmetic:a2 {Greater(:a1,:a2)}
    | arithmetic:a1 ws* "==" ws* arithmetic:a2 {Equals(:a1,:a2)}
    | arithmetic:a1 ws* "!=" ws* arithmetic:a2 {NotEquals(:a1,:a2)}
    | '(' ws* or:or ws* ')' {:or};

goto = ws* '{' ws* int?:head sub_goto*:tail ws* '}' ws* {GrammarGoto(concat(:head,:tail))};
sub_goto = ws* ',' ws* int:i {:i};

operand = int | apply_var;
apply_var = apply | var;
var = (letter (letter | digit)*)$v {Var($v)};
int = digit+$d {Int(s2i($d))};
letter = 'a' - 'z' | 'A' - 'Z' | '_';
digit = ('0'-'9');
ws = ' ' | '\t' | '\n' | '\r';
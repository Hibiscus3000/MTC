annotated_program = ws* precondition:pre ws* program:program postcondition:post ws*
    {AnnotatedProgram(:pre,:program,:post)};
precondition = '{' ws* declarations:decls ws* ann_eqv:eqv ws* '}' {PreCondition(:decls,:eqv)};
postcondition = '{' ws* ann_eqv:eqv ws* '}' {PostCondition(:eqv)};

ann_eqv = ann_impl:impl ws+ "<->" ws+ ann_eqv:eqv {AEquivalent(:impl,:eqv)} | ann_impl;
ann_impl = ann_or:or ws+ "->" ws+ ann_impl:impl {AImplication(:or,:impl)} | ann_or;
ann_or = ann_and:and ws+ "||" ws+ ann_or:or {AOr(:and,:or)} | ann_and;
ann_and = ann_not:not ws+ "&&" ws+ ann_and:and {AAnd(:not,:and)} | ann_not;
ann_not = '~' ws* ann_relation_atom:ra {ANot(:ra)} | ann_relation_atom | '(' ws* ann_eqv:eqv ws* ')' {:eqv};
ann_relation_atom = relation_atom
    | ('∃' | 'E') ws+ declaration:d ws* '(' ws* ann_eqv:eqv ws* ')' {Exists(:d,:eqv)}
    | ('∀' | 'A') ws+ declaration:d ws* '(' ws* ann_eqv:eqv ws* ')' {Any(:d,:eqv)}
    | "TRUE" {True()}
    | "FALSE" {False()};

program = declarations:decls ws* sequence:sequence ws* {Program(:decls,:sequence)};

declarations = '{' ws* declaration_semicolon*:decls '}' {:decls} | declaration_semicolon*;
declaration_semicolon = declaration:d ';' ws* {:d};
declaration = "VAR" ws* var:v ws* ':' ws* type:t {Declaration(:v,:t)};
type = "INT" {IntType()}
    | '[' type:ind ws+ "ARRAY" ws+ "OF" ws+ type:val ']' {ArrayType(:ind,:val)}
    | '[' type:t ']' {ArrayType(IntType(),:t)};

body_seq = body | sequence;
body = test
    | assignment
    | '{' ws* body_seq:b choice+:chs ws* '}' {buildAnnotatedChoice(:b,:chs)}
    | iteration;
choice = ws+ 'U' ws+ body_seq:b {:b};
sequence = '{' ws* subsequence*:ss '}' {AnnotatedSequence(:ss)};
iteration = '@' ws* '{' ws* ann_eqv:invariant ws* '}' ws* '{' ws* subsequence+:ss "}*"
    {AnnotatedIteration(:invariant, AnnotatedSequence(:ss))};
subsequence = body:b ws* ';' ws+ {:b} | sequence:s ws+ {:s};

assignment = apply_var:av ws* ":=" expr:e {Assignment(:av,:e)};
expr = update | arithmetic;

arithmetic = sub:s ws* '+' ws* arithmetic:a {Add(:s,:a)} | sub;
sub = prod:p subsub*:s {buildSub(:p,:s)}; 
subsub = ws* '-' prod:p {:p};
prod = div:d ws* '*' ws* prod:p {Product(:d,:p)} | div;
div = neg:n subdiv*:d {buildDiv(:n,:d)};
subdiv = ws* '/' neg:n {:n};
neg = ws* '-' neg:n {Neg(:n)} | parentheses;
parentheses = ws* '(' ws* arithmetic:a ws* ')' {:a} | ws* operand;

apply = ws* "APP(" (update | apply_var):array ',' ws? expr:index ')' {Apply(:array,:index)}
     | ws* (update | var):array '[' expr:index ']' {Apply(:array,:index)};
update = ws* "UPD(" (update | apply_var):array ',' ws? expr:index ',' ws? expr:new_value ')'
    {Update(:array,:index,:new_value)}; 

test = simple_test | while | if;
simple_test = '(' ws* or:or ws* ") ?" {SimpleTest(:or)};
while = '@' ws* '{' ws* ann_eqv:invariant ws* '}' ws* "while" ws+ '(' or:or ')' ws+ body_seq:b
    {AnnotatedWhile(:invariant,:or,:b)};
if = "if" ws+ '(' or:or ')' ws+ body_seq:if else?:else {AnnotatedIf(:or,:if,:else)};
else = ws* "else" ws+ body_seq:b {:b};

or = and:and ws+ "||" ws+ or:or {Or(:and,:or)} | and;
and = not:not ws+ "&&" ws+ and:and {And(:not,:and)} | not;
not = '~' ws* relation_atom:ra {Not(:ra)} | relation_atom | '(' ws* or:or ws* ')' {:or};
relation_atom = arithmetic:a1 ws* "<=" ws* arithmetic:a2 {LesserEquals(:a1,:a2)}
    | arithmetic:a1 ws* ">=" ws* arithmetic:a2 {GreaterEquals(:a1,:a2)}
    | arithmetic:a1 ws* '<' ws* arithmetic:a2 {Lesser(:a1,:a2)}
    | arithmetic:a1 ws* '>' ws* arithmetic:a2 {Greater(:a1,:a2)}
    | arithmetic:a1 ws* "==" ws* arithmetic:a2 {Equals(:a1,:a2)}
    | arithmetic:a1 ws* "!=" ws* arithmetic:a2 {NotEquals(:a1,:a2)};

operand = int | apply_var;
apply_var = apply | var;
var = (letter (letter | digit)*)$v {Var($v)};
int = digit+$d {Int(s2i($d))};
letter = 'a' - 'z' | 'A' - 'Z' | '_';
digit = ('0'-'9');
ws = ' ' | '\t' | '\n' | '\r';

import MTC/lab13/annotatedNeMo;
import MTC/lab11/NeMo2s;

export
{
    annotatedNeMo2s(annotatedProgram : AnnotatedProgram) -> string;
    formula2s(formula : Formula,underOperationPriority : int) -> string;
}

annotatedNeMo2s(annotatedProgram)
{
    precondition2s(annotatedProgram.precondition) + "\n" + nemoProgram2s(annotatedProgram.program) + "\n"
        + postcondition2s(annotatedProgram.postcondition);
}

nemoProgram2s(nemoProgram)
{
    declarations2s(nemoProgram.declarations,"") + annotatedBody2s(nemoProgram.annotatedBody,"");
}

annotatedBody2s(annotatedBody,nesting)
{
    switch(annotatedBody : AnnotatedBody)
    {
        Assignment(varApply,expr) : body2s(annotatedBody,nesting);
        AnnotatedTest() : annotatedTest2s(annotatedBody,nesting);
        AnnotatedSequence(annotatedBodies) :
            nesting + "{\n"
            + fold(annotatedBodies,"",\acc,annBody -> acc + annotatedBody2s(annBody,nesting + "\t")
                + (if (annBody.structname == "AnnotatedSequence") "" else ";") + "\n")
            + nesting + "}";
        AnnotatedChoice(annotatedBodies) :
        {
            firstBody = annotatedBodies[0];
            nesting + "{\n"
            + fold(removeIndex(annotatedBodies,0),annotatedBody2s(firstBody,nesting + "\t"),
                \acc,annBody -> acc + " U\n" + annotatedBody2s(annBody,nesting + "\t"))
            + "\n" + nesting + "}";
        }
        AnnotatedIteration(invariant,annotatedSequence) :
            nesting + "@{\n" + nesting + "\t" + formula2s(invariant,0) + "\n" + nesting + "}\n"
                + annotatedBody2s(annotatedSequence,nesting) + "*";
    }
}

annotatedTest2s(annotatedTest,nesting)
{
    switch(annotatedTest : AnnotatedTest)
    {
        SimpleTest(relation) : nesting + test2s(annotatedTest,nesting);
        AnnotatedIf(relation,op_if,op_else) :
            nesting + "if (" + relation2s(relation,0) + ")\n" + annotatedBody2s(op_if,nesting
                + (if (op_if.structname != "AnnotatedSequence") "\t" else ""))
            + (if (1 == length(op_else)) "\n" + nesting + "else\n" + annotatedBody2s(op_else[0],nesting
                    + (if (op_else[0].structname != "AnnotatedSequence") "\t" else "")) else "");
        AnnotatedWhile(invariant,relation,body) :
            nesting + "@{\n" + nesting + "\t" + formula2s(invariant,0) + "\n" + nesting + "}\n" + nesting
                + "while (" + relation2s(relation,0) + ")\n" + annotatedBody2s(body, nesting
                    + (if (body.structname != "AnnotatedSequence") "\t" else ""));
    }
}

precondition2s(precondition)
{
    "{\n" + declarations2s(precondition.declarations,"\t") + "\t" + formula2s(precondition.formula,1) + "\n}";
}

postcondition2s(postcondition : PostCondition)
{
    "{\n\t" + formula2s(postcondition.formula,1) + "\n}";
}

formula2s(formula,underOperationPriority)
{
    operationPriority = ref 0;
    result = switch(formula : Formula)
    {
        Any(declaration,anyFormula) : 
        {
            operationPriority := 0;
            "∀ " + declaration2s(declaration) + " " + formula2s(anyFormula,7); 
        }
        Exists(declaration,existsFormula) :
        {
            operationPriority := 0;
            "∃ " + declaration2s(declaration) + " " +  formula2s(existsFormula,7); 
        }
        RelationAtom() : 
        {
            operationPriority := 0;
            relationAtom2s(formula);
        }
        AEquivalent(f1,f2) :
        {
            operationPriority := 1;
            formula2s(f1,1) + " <-> " + formula2s(f2,1);
        }
        AImplication(f1,f2) :
        {
            operationPriority := 2;
            formula2s(f1,5) + " -> " + formula2s(f2,5);
        }
        AOr(f1,f2) :
        {
            operationPriority := 3;
            formula2s(f1,3) + " || " + formula2s(f2,3);
        }
        AAnd(f1,f2) :
        {
            operationPriority := 4;
            formula2s(f1,4) + " && " + formula2s(f2,4);
        }
        True() : 
        {
            operationPriority := 5;
            "TRUE";
        }
        False() :
        {
            operationPriority := 5;
            "FALSE";
        }
        ANot(f) :
        {
            operationPriority := 6;
            "~" + formula2s(f,7);
        }
    }
    if (^operationPriority < underOperationPriority)
        "(" + result + ")"
    else
        result;
}
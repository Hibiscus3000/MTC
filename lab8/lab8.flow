import MTC/lab7/algebra_grammar;

export
{
    derivation(e : Expr, var : string) -> Expr;
    simplifyConsts(e : Expr) -> Expr;
}

derivation(e,var)
{
    switch(e : Expr)
    {
        Div(e1,e2) : 
        {
            e1ContainsVar = containsVar(e1,var);
            e2ContainsVar = containsVar(e2,var);
            if (e1ContainsVar)
            {
                if (e2ContainsVar)
                    Div(Sub(Product(derivation(e1,var),e2),Product(derivation(e2,var),e1)),Product(e2,e2))
                else
                    Div(derivation(e1,var),e2);
            }
            else 
            {
                if (e2ContainsVar)
                    Neg(Div(Product(derivation(e2,var),e1),Product(e2,e2)))
                else
                    Rational(0,1);
            }   
        }
        Product(e1,e2) :
        {
            e1ContainsVar = containsVar(e1,var);
            e2ContainsVar = containsVar(e2,var);
            if (e1ContainsVar)
            {
                if (e2ContainsVar)
                    Add(Product(derivation(e2,var),e1),Product(derivation(e1,var),e2))
                else
                    Product(derivation(e1,var), e2);
            }
            else 
            {
                if (e2ContainsVar)
                    Product(derivation(e2,var), e1)
                else
                    Rational(0,1);
            }   
        }
        Sub(e1,e2) :
        {
            e1ContainsVar = containsVar(e1,var);
            e2ContainsVar = containsVar(e2,var);
            if (e1ContainsVar)
            {
                if (e2ContainsVar)
                    Sub(derivation(e1,var),derivation(e2,var))
                else
                    derivation(e1,var);
            }
            else 
            {
                if (e2ContainsVar)
                    Neg(derivation(e2,var))
                else
                    Rational(0,1);
            }
        }
        Add(e1,e2) :
        {
            e1ContainsVar = containsVar(e1,var);
            e2ContainsVar = containsVar(e2,var);
            if (e1ContainsVar)
            {
                if (e2ContainsVar)
                    Add(derivation(e1,var),derivation(e2,var))
                else
                    derivation(e1,var);
            }
            else 
            {
                if (e2ContainsVar)
                    derivation(e2,var)
                else
                    Rational(0,1);
            }
        }
        Neg(e1) :
        {
            if (containsVar(e1,var))
                Neg(derivation(e1,var))
            else
                Rational(0,1);
        }
        Var(s) : Rational(1,1);
        Rational(n,d) : Rational(0,1);
    }
}

simplifyConsts(e)
{
    simplifyConstsNeg(e,1);
}

simplifyConstsNeg(e : Expr,neg : int)
{
    switch(e : Expr)
    {
        Div(e1,e2) : 
            {
                e1ContainsAnyVar = containsAnyVar(e1);
                e2ContainsAnyVar = containsAnyVar(e2);
                e1Simplified = if (!e1ContainsAnyVar) calc(e1) else simplifyConstsNeg(e1, neg);
                e2Simplified = if (!e2ContainsAnyVar) calc(e2) else simplifyConstsNeg(e2, neg);
                if (checkDenominator(e1Simplified, 0) || checkDenominator(e2Simplified, 0) ||
                    checkNumerator(e2Simplified, 0))
                    Rational(0,0)
                else
                    if (!e2ContainsAnyVar)
                    {
                        if (!e1ContainsAnyVar)
                            calc(Div(e1Simplified,e2Simplified))
                        else
                        {
                            if (checkNumeratorEqualsDenominator(e2Simplified))
                                e1Simplified
                            else
                            {
                                if (checkNumeratorEqualsMinusDenominator(e2Simplified))
                                    simplifyConstsNeg(e1,-1*neg)
                                else
                                    Product(flip(e2Simplified),e1Simplified);
                            }
                        }
                    }
                    else
                        if (!e1ContainsAnyVar && checkNumerator(e1Simplified,0))
                                Rational(0,1)
                            else
                                Div(e1Simplified,e2Simplified);
            }
        Product(e1,e2) :
        {
            e1ContainsAnyVar = containsAnyVar(e1);
            e2ContainsAnyVar = containsAnyVar(e2);
            e1Simplified = if (!e1ContainsAnyVar) calc(e1) else simplifyConstsNeg(e1,neg);
            e2Simplified = if (!e2ContainsAnyVar) calc(e2) else simplifyConstsNeg(e2,neg);
            if (checkDenominator(e1Simplified,0) || checkDenominator(e2Simplified,0))
                Rational(0,0)
            else
                if (!e2ContainsAnyVar)
                {
                    if (!e1ContainsAnyVar)
                        calc(Product(e1Simplified,e2Simplified))
                    else
                    {
                        if (checkNumerator(e2Simplified,0))
                            Rational(0,1)
                        else
                        {
                            if (checkNumeratorEqualsDenominator(e2Simplified))
                                e1Simplified
                            else
                            {
                                if (checkNumeratorEqualsMinusDenominator(e2Simplified))
                                    simplifyConstsNeg(e1Simplified,-1*neg)
                                else
                                    Product(e2Simplified,e1Simplified)
                            }
                        }
                    }
                }
                else
                    if (!e1ContainsAnyVar)
                    {
                        if (checkNumerator(e1Simplified,0))
                            Rational(0,1)
                        else
                        {
                            if (checkNumeratorEqualsDenominator(e1Simplified))
                                e2Simplified
                            else
                                if (checkNumeratorEqualsMinusDenominator(e1Simplified))
                                    simplifyConstsNeg(e2Simplified,-1*neg)
                                else
                                    Product(e1Simplified, e2Simplified);
                        }
                    }
                    else
                        Product(e1Simplified,e2Simplified);
        }
        Sub(e1,e2) :
        {
            e1ContainsAnyVar = containsAnyVar(e1);
            e2ContainsAnyVar = containsAnyVar(e2);
            e1Simplified = if (!e1ContainsAnyVar) calc(e1) else simplifyConstsNeg(e1,neg);
            e2Simplified = if (!e2ContainsAnyVar) calc(e2) else simplifyConstsNeg(e2,-1*neg);
            if (checkDenominator(e1Simplified,0) || checkDenominator(e2Simplified,0))
                Rational(0,0)
            else
                if (!e2ContainsAnyVar)
                {
                    if (!e1ContainsAnyVar)
                        calc(Sub(e1Simplified,e2Simplified))
                    else
                        if (checkNumerator(e2Simplified,0))
                            e1Simplified
                        else
                            Add(e2Simplified,e1Simplified);
                }
                else
                    if (!e1ContainsAnyVar && checkNumerator(e1Simplified,0))
                        e2Simplified
                    else
                        Add(e1Simplified,e2Simplified);
        }
        Add(e1,e2) :
        {
            e1ContainsAnyVar = containsAnyVar(e1);
            e2ContainsAnyVar = containsAnyVar(e2);
            e1Simplified = if (!e1ContainsAnyVar) calc(e1) else simplifyConstsNeg(e1,neg);
            e2Simplified = if (!e2ContainsAnyVar) calc(e2) else simplifyConstsNeg(e2,neg);
            if (checkDenominator(e1Simplified,0) || checkDenominator(e2Simplified,0))
                Rational(0,0)
            else
                if (!e2ContainsAnyVar)
                {
                    if (!e1ContainsAnyVar)
                        calc(Add(e1Simplified,e2Simplified))
                    else
                        if (checkNumerator(e2Simplified,0))
                            e1Simplified
                        else
                            Add(e2Simplified,e1Simplified);
                }
                else
                    if (!e1ContainsAnyVar && checkNumerator(e1Simplified,0))
                        e2Simplified
                    else
                        Add(e1Simplified,e2Simplified);
        }
        Neg(e1) : simplifyConstsNeg(e1,-1*neg);
        Var(s) : if (-1 == neg) Neg(e) else e;
        Rational(n,d) : getRational(-n,d);
    }
}

containsVar(e : Expr, var : string) -> bool
{
    switch(e : Expr)
    {
        Div(e1,e2) : containsVar(e1,var) || containsVar(e2,var);
        Product(e1,e2) : containsVar(e1,var) || containsVar(e2,var);
        Sub(e1,e2) : containsVar(e1,var) || containsVar(e2,var);
        Add(e1,e2) : containsVar(e1,var) || containsVar(e2,var);
        Neg(e1) : containsVar(e1,var);
        Var(s) : s == var;
        Rational(n,d) : false;
    }
}

containsAnyVar(e : Expr) -> bool
{
    switch(e : Expr)
    {
        Div(e1,e2) : containsAnyVar(e1) || containsAnyVar(e2);
        Product(e1,e2) : containsAnyVar(e1) || containsAnyVar(e2);
        Sub(e1,e2) : containsAnyVar(e1) || containsAnyVar(e2);
        Add(e1,e2) : containsAnyVar(e1) || containsAnyVar(e2);
        Neg(e1) : containsAnyVar(e1);
        Var(s) : true;
        Rational(n,d) : false;
    }
}






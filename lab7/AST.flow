import lingo/pegcode/driver;

export 
{
	Expr ::= Rational, Var, Neg, Add, Sub, Product, Div;
		Div : (e1 : Expr, e2 : Expr);
    	Product : (e1 : Expr, e2 : Expr);
		Sub : (e1 : Expr, e2 : Expr);
		Add : (e1 : Expr, e2 : Expr);
		Neg : (e : Expr);
		Var : (s : string);
		Rational : (numerator : int, denominator : int);
	algebraGrammar()  -> [PegOp];
	buildSub(xs : [flow]) -> Sub;
	buildDiv(xs : [flow]) -> Div;
	subDivPegActions =
	{
		tSub = setTree(defaultPegActions.t, "buildSub", buildSub);
		tDiv = setTree(tSub,"buildDiv",buildDiv);
		SemanticActions(tDiv);
	}
	getRational(n : int, d : int) -> Rational;
	s2varDefPairs(strs : [string]) -> [Pair<Var,Expr>];
	var2e(var : string, defPairs : [Pair<Var,Expr>]) -> Expr;
	checkDenominator(e : Expr, val : int) -> bool;
	checkNumerator(e : Expr, val : int) -> bool;
	checkNumeratorEqualsDenominator(e : Expr) -> bool;
	checkNumeratorEqualsMinusDenominator(e : Expr) -> bool;
	flip(e : Expr) -> Expr;
}

algebraGrammarOp : ref Maybe<[PegOp]> = ref None();
varDefGrammarOp : ref Maybe<[PegOp]> = ref None();

algebraGrammar()
{
	onlyOnce(algebraGrammarOp, \ -> {
		compilePegGrammar("#include MTC/lab7/algebra_grammar.lingo");
	});
}

varDefGrammar()  -> [PegOp]
{
	onlyOnce(varDefGrammarOp, \ -> {
		compilePegGrammar("#include MTC/lab7/var_def_grammar.lingo");
	});
}

buildSub(xs)
{
	fold(xs[1], xs[0], \acc, x -> Sub(acc, x));
}

buildDiv(xs)
{
	fold(xs[1],xs[0], \acc,x -> Div(acc,x));
}

getRational(n, d)
{
	if (0 == d)
		Rational(0,0)
	else
		if (0 == n)
			Rational(0,1)
		else
		{
			gcd = GCD(n,d);
			if (d < 0)
				Rational(- n / gcd,- d / gcd)
			else
				Rational(n / gcd, d / gcd);
		}
}

GCD(a : int, b : int)
{
	a1 = if (a > 0) a else -a;
	b1 = if (b > 0) b else -b;
	if (a1 > b1)
		GCD_sorted(b1,a1 % b1)
	else
		GCD_sorted(a1, b1 % a1);
}

GCD_sorted(a : int, b : int)
{
	if (0 == b)
		a
	else
		GCD_sorted(b,a % b);
}

LCM(a : int, b : int)
{
	a * b / GCD(a,b);
}

s2varDefPairs(strs)
{
	fold(strs,[], \acc, str -> arrayPush(acc,parsic(varDefGrammar(),str,subDivPegActions)));
}

var2e(var, defPairs)
{
	fold(defPairs,Rational(1,0),\acc, defPair ->
		if (defPair.first.s == var) defPair.second else acc);
}

checkDenominator(e, val)
{
	switch(e)
	{
        Rational(n,d) : val == d;
		default : false;
	}
}

checkNumerator(e, val)
{
    switch(e)
    {
        Rational(n,d) : val == n;
        default : false;
    }   
}

checkNumeratorEqualsDenominator(e)
{
    switch(e)
    {
        Rational(n,d) : d == n;
        default : false;
    }
}

checkNumeratorEqualsMinusDenominator(e)
{
    switch(e)
    {
        Rational(n,d) : -d == n;
        default : false;
    }
}

flip(e)
{
    switch(e)
    {
        Rational(n,d) : Rational(d,n);
        default : e;
    }
}
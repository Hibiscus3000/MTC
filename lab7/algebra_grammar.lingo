expr = sub:s '+' expr:e {Add(:s,:e)} | sub;
sub = prod:p subsub*:s {buildSub(:p,:s)}; 
subsub = sp* '-' prod:p {:p};
prod = div:d '*' prod:p {Product(:d,:p)} | div;
div = neg:n subdiv*:d {buildDiv(:n,:d)};
subdiv = sp* '/' neg:n {:n};
neg = sp* '-' neg:n {Neg(:n)} | parentheses;
parentheses = sp* '(' sp* expr:e sp* ')' sp* {:e} | arg;
arg = int | var;
int = sp* digit+$d sp* {Rational(s2i($d),1)};
var = sp* (letter (letter | digit)*)$str sp* {Var($str)};
letter = 'a' - 'z' | 'A' - 'Z' | '_';
digit = '0'-'9';
sp = ' ';
expr = proddiv:p '+' expr:e {Add(:p,:e)} |
     sub:s '+' expr:e {Add(:s,:e)} |
     sub:s {:s} |
     proddiv:p {:p};
proddiv = neg:n '*' proddiv:p {Product(:n,:p)} |
     neg:n '/' proddiv:p {Div(:n,:p)} |
     neg:n {:n};
sub = proddiv:p subsub*:s {buildSub(:p,:s)}; 
subsub = sp* '-' proddiv:p {:p};
neg = sp* '-' parentheses:a {Neg(:a)} | parentheses:a {:a};
parentheses = sp* '(' sp* expr:e sp* ')' sp* {:e} | arg:a {:a};
arg = int:i {:i} | var:v {:v};
int = sp* digit+$d sp* {Rational(s2i($d),1)};
var = sp* (letter (letter | digit)*)$str sp* {Var($str)};
letter = 'a' - 'z' | 'A' - 'Z';
digit = '0'-'9';
sp = ' ';
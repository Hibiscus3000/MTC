import MTC/lab7/calc;

export
{
    e2s(e : Expr) -> string;
	e2sVariables(e : Expr, defs : [string]) -> string;
    r2s(rational : Rational) -> string;
}

e2s(e)
{
	e2sVariables(e,[]);
}

e2sVariables(e,defs)
{
	e2sParentheses(e,0, s2varDefPairs(defs));
}

// OPERATION PRIORITIES
// 1 for Add and Sub
// 2 for subtrahend, Product, Div and Neg
// 2 for divider
// 4 for Var and Rational

e2sParentheses(e, underOperationPriority, defs : [Pair<Var,Expr>]) -> string
{
	operationPriority = ref 0;
	result = switch (e : Expr)
	{
		Div(e1,e2) :
		{
			operationPriority := 2;
			e2sParentheses(e1,2,defs) + " / " + e2sParentheses(e2,3,defs);
		}
		Product(e1,e2) :
		{
			operationPriority := 2;
			e2sParentheses(e1,2,defs) + " * " + e2sParentheses(e2,2,defs);
		}
		Add(e1,e2) :
		{
			operationPriority := 1;
            e2sParentheses(e1,1,defs) + " + " + e2sParentheses(e2,1,defs);
		}
		Sub(e1,e2) :
		{
			operationPriority := 1;
            e2sParentheses(e1,1,defs) + " - " + e2sParentheses(e2,2,defs);
		}
		Neg(expr) :
		{
			operationPriority := 3;
			"-" + e2sParentheses(expr,2,defs);
		}
		Var(s) :
		{
			operationPriority := 4;
			e2sParentheses(var2e(s,defs),underOperationPriority,defs);
		}
		Rational(n,d) : 
		{
			operationPriority := 4;
			r2s(e);
		}
	}
	if (^operationPriority < underOperationPriority)
		"(" + result + ")"
	else
		result;
}

r2s(rational)
{
	if (0 == rational.denominator)
		"INVALID"
	else
		if (1 == rational.denominator)
			i2s(rational.numerator)
		else
			i2s(rational.numerator) + "/" + i2s(rational.denominator);
}
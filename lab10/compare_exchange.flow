import ds/tree;
import MTC/lab7/AST;

export
{
    compareAndExchangeArr(expr : Expr, identities : [Pair<Expr,Expr>]) -> Tree<Expr,string>;
    compareAndExchange(expr : Expr, identity : Pair<Expr,Expr>) -> Expr;
    getDifficulty(expr : Expr) -> int;
}

compareAndExchangeArr(expr,identities)
{
    fold(identities,makeTree(),\tree,identity -> setTree(tree,compareAndExchange(expr,identity),""));
}

compareAndExchange(expr,identity)
{
    eitherMap(equalsTo(expr,identity.first,makeTree()),
        \designationTree -> either(change(identity.second,designationTree),expr),expr);
}

equalsTo(expr, identity : Expr, designationTree : Tree<Var,Expr>)
{
    if (identity.structname == "Rational" || identity.structname == "Var")
    {
        value = lookupTree(designationTree,identity);
        eitherMap(value,\val -> if (expr == val) Some(designationTree) else None(),
            Some(setTree(designationTree,identity,expr)));
    }
    else
    {
        switch(expr : Expr)
        {
            Div(e11,e12) :
                switch(identity : Expr)
                {
                    Div(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Product(e11,e12) :
                switch(identity : Expr)
                {
                    Product(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Add(e11,e12) :
                switch(identity : Expr)
                {
                    Add(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Sub(e11,e12) :
                switch(identity : Expr)
                {
                    Sub(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Neg(e1) :
                switch(identity : Expr)
                {
                    Neg(e2) : equalsTo(e1,e2,designationTree);
                    default : None();
                }
            default : None();
        }
    }
}

getTree(e11,e12,e21,e22,designationTree)
{
    tree1 = equalsTo(e11,e21,designationTree);
    maybeBind(tree1,\tree -> equalsTo(e12,e22,tree));
}

change(identity,designationTree)
{
    switch(identity : Expr)
    {
        Div(e1,e2) : maybeMap2(\op1,op2 -> Div(op1,op2))
            (change(e1,designationTree),change(e2,designationTree));
        Product(e1,e2) : maybeMap2(\op1,op2 -> Product(op1,op2))
            (change(e1,designationTree),change(e2,designationTree));
        Sub(e1,e2) : maybeMap2(\op1,op2 -> Sub(op1,op2))
            (change(e1,designationTree),change(e2,designationTree));
        Add(e1,e2) : maybeMap2(\op1,op2 -> Add(op1,op2))
            (change(e1,designationTree),change(e2,designationTree));
        Neg(e1) : maybeMap(change(e1,designationTree),\op1 -> Neg(op1));
        Var(s) : lookupTree(designationTree,identity);
        Rational(n,d) : Some(identity);
    }
}

getDifficulty(expr)
{
    switch(expr : Expr)
    {
        Div(e1,e2) : getDifficulty(e1) + getDifficulty(e2) + 3;
        Product(e1,e2) : getDifficulty(e1) + getDifficulty(e2) + 2;
        Sub(e1,e2) : getDifficulty(e1) + getDifficulty(e2) + 1;
        Add(e1,e2) : getDifficulty(e1) + getDifficulty(e2) + 1;
        Neg(e1) : getDifficulty(e1) + 1;
        Rational(n,d) : 0;
        Var(s) : 0;
    }
}
import MTC/lab10/compare_exchange;
import MTC/lab7/e2s;

export
{
    defIdentities = [//"-a * b = -(a * b)"
                /*,*/"a + b = b + a"
                ,"a * b = b * a"
                ,"a + (b + c) = (a + b) + c"
                ,"a * (b * c) = (a * b) * c"
                //,"-a + b = b - a"
                //,"a + -b = a - b"
                //,"x*x - y*y = (x - y) * (x + y)"
                //,"a*a + 2*a*b + b*b = (a + b)*(a + b)"
                //,"a*a - 2*a*b + b*b = (a - b)*(a - b)"
                ,"a * b + a * c = a * (b + c)"
                //,"a * b - a * c = a * (b - c)"
                ];
    simplify(expr : Expr, identities : [string]) -> Expr;
}

identityGrammarOp : ref Maybe<[PegOp]> = ref None();

identityGrammar()
{
	onlyOnce(identityGrammarOp, \ -> {
		compilePegGrammar("#include MTC/lab10/identity_grammar.lingo");
	});
}

simplify(expr,identities)
{
    pairOfTreesOfIdentities = splitIdentities(identities);
    auxiliaryIdentities = tree2pairs(pairOfTreesOfIdentities.first);
    allExprVarsTree = fold(auxiliaryIdentities,makeTree1(expr,""),
        \tree,auxiliaryIdentity -> fold(tree2pairs(tree),tree,
            \allExprVariantsTree,exprVariantPair -> setTreeValues(allExprVariantsTree,tree2pairs(
                getAllExprVarsSwitch(auxiliaryIdentity,exprVariantPair.first)))));
    allExprVarsPairs = tree2pairs(allExprVarsTree);
    println(length(allExprVarsPairs));
    simplificationIdentities = tree2pairs(pairOfTreesOfIdentities.second);
    fold(allExprVarsPairs,expr,\acc,variant ->
    {
        simplified = simplifyExprSwitch(variant.first,simplificationIdentities);
        if (getDifficulty(acc) > getDifficulty(simplified))
        {
            println(e2s(simplified));
            simplified
        }
        else
            acc;
    });
}

simplifyExprSwitch(expr, identities)
{
    switch(expr : Expr)
    {
        Div(e1,e2) : simplifyExpr(expr,e1,e2,makeDiv,identities);
        Product(e1,e2) : simplifyExpr(expr,e1,e2,makeProduct,identities);
        Sub(e1,e2) : simplifyExpr(expr,e1,e2,makeSub,identities);
        Add(e1,e2) : simplifyExpr(expr,e1,e2,makeAdd,identities);
        Neg(e1) :
        {
            v1 = compareAndExchangeArr(Neg(simplifyExprSwitch(e1,identities)),identities);
            v2 = compareAndExchangeArr(expr,identities);
            simplified = chooseSimpliest(expr,[v1,v2]);
            if (expr != simplified)
                simplifyExprSwitch(simplified,identities)
            else
                expr;
        }
        Rational(n,d) : getRational(n,d);
        Var(s) : expr;
    }
}

simplifyExpr(expr,e1,e2,make,identities)
{
    e1Simplified = simplifyExprSwitch(e1,identities);
    e2Simplified = simplifyExprSwitch(e2,identities);
    v1 = compareAndExchangeArr(make(e1Simplified,e2Simplified), identities);
    v2 = compareAndExchangeArr(expr,identities);
    v3 = make(e1Simplified,e2Simplified);
    simplified = chooseSimpliest(expr,[v1,v2,v3]);
    if (expr != simplified)
        simplifyExprSwitch(simplified,identities)
    else
        expr;
}

chooseSimpliest(expr,variantsArr)
{
    fold(variantsArr,expr,\acc,variant ->
        if (getDifficulty(acc) > getDifficulty(variant))
            variant
        else
            acc);
}

// return Pair of two trees, in witch first is a tree of auxiliary identites,
// and the second is a tree of simplification identities

splitIdentities(identities)
{
    fold(identities,Pair(makeTree(),makeTree()),
        \acc : Pair<Tree<Expr,Expr>,Tree<Expr,Expr>>, identity : string -> 
    {
        identityExprPair = parsic(identityGrammar(), identity, subDivPegActions);
        if (getDifficulty(identityExprPair.first) > getDifficulty(identityExprPair.second))
            Pair(acc.first,setTree(acc.second,identityExprPair.first,identityExprPair.second))
        else
            Pair(setTree(acc.first,identityExprPair.first,identityExprPair.second),acc.second)
    });
}

getAllExprVarsSwitch(auxiliaryIdentity : Pair<Expr,Expr>,expr : Expr) -> Tree<Expr,string>
{
    switch(expr : Expr)
    {
        Div(e1,e2) : getAllExprVarsSubSwitch(auxiliaryIdentity,e1,e2,makeDiv);
        Product(e1,e2) : getAllExprVarsSubSwitch(auxiliaryIdentity,e1,e2,makeProduct);
        Sub(e1,e2) : getAllExprVarsSubSwitch(auxiliaryIdentity,e1,e2,makeSub);
        Add(e1,e2) : getAllExprVarsSubSwitch(auxiliaryIdentity,e1,e2,makeAdd);
        Neg(e1) : 
        {
            e1AllVarsPairs = tree2pairs(getAllExprVarsSwitch(auxiliaryIdentity,e1));
            fold(e1AllVarsPairs,makeTree(),
                \tree1,e1Variant -> setTree(setTree(tree1,Neg(e1Variant.first),""),
                    compareAndExchange(Neg(e1Variant.first),auxiliaryIdentity),""));
        }
        Var(s) : makeTree1(expr,"");
        Rational(n,d) : makeTree1(expr,"");
    }
}

getAllExprVarsSubSwitch(auxiliaryIdentity,e1,e2,make) -> Tree<Expr,string>
{
    e1AllVarsPairs = tree2pairs(getAllExprVarsSwitch(auxiliaryIdentity,e1));
    e2AllVarsPairs = tree2pairs(getAllExprVarsSwitch(auxiliaryIdentity,e2));
    fold(e1AllVarsPairs,makeTree(),
        \tree1,e1Variant -> setTreeValues(tree1,tree2pairs(fold(e2AllVarsPairs,makeTree(),
            \tree2,e2Variant ->
                setTree(setTree(tree2,make(e1Variant.first,e2Variant.first),""),
                    compareAndExchange(make(e1Variant.first,e2Variant.first),auxiliaryIdentity),"")))));
}

makeDiv(e1,e2)
{
    Div(e1,e2);
}

makeProduct(e1,e2)
{
    Product(e1,e2);
}

makeSub(e1,e2)
{
    Sub(e1,e2);
}

makeAdd(e1,e2)
{
    Add(e1,e2);
}
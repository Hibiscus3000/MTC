import MTC/lab10/compare_exchange;
import MTC/lab7/e2s;

export
{
    defIdentities = ["-a * b = -(a * b)"
                ,"a + b = b + a"
                ,"a * b = b * a"
                ,"a + (b + c) = (a + b) + c"
                ,"a * (b * c) = (a * b) * c"
                ,"a + -b = a - b"
                ,"x*x - y*y = (x - y) * (x + y)"
                ,"a*a + 2*a*b + b*b = (a + b)*(a + b)"
                ,"a*a - 2*a*b + b*b = (a - b)*(a - b)"
                ,"a * b + a * c = a * (b + c)"
                ,"a * b - a * c = a * (b - c)"
                ,"a * 0 = 0"
                ,"a * 1 = a"
                ,"a + 0 = a"
                ];
    simplify(expr : Expr, identities : [string]) -> [Expr];
}

identityGrammarOp : ref Maybe<[PegOp]> = ref None();

identityGrammar()
{
	onlyOnce(identityGrammarOp, \ -> {
		compilePegGrammar("#include MTC/lab10/identity_grammar.lingo");
	});
}

simplify(expr,identities)
{
    simplifyExprSwitch(expr,fold(identities,[],\acc,identity ->
        arrayPush(acc,parsic(identityGrammar(),identity,subDivPegActions))))
}

simplifyExprSwitch(expr,identities)
{
    switch (expr : Expr)
    {
        Div(e1,e2) : simplifyExprSubSwitch(e1,e2,identities,makeDiv);
        Product(e1,e2) : simplifyExprSubSwitch(e1,e2,identities,makeProduct);
        Sub(e1,e2) : simplifyExprSubSwitch(e1,e2,identities,makeSub);
        Add(e1,e2) : simplifyExprSubSwitch(e1,e2,identities,makeAdd);
        Neg(e) :
        {
            eSimplified = simplifyExprSwitch(e,identities);
            exprVariants = fold(eSimplified,makeTree(),\tree,eVariant -> setTree(tree,Neg(eVariant),""));
            simplifyExpr(exprVariants,identities);
        }
        Var(s) : [expr];
        Rational(n,d) : [expr];
    }
}

simplifyExprSubSwitch(e1,e2,identities,make)
{
    e1Simplified = simplifyExprSwitch(e1,identities);
    e2Simplified = simplifyExprSwitch(e2,identities);
    exprVariants = fold(e1Simplified,makeTree(),\tree1,e1Variant ->
        setTreeValues(tree1,tree2pairs(
            fold(e2Simplified,makeTree(),\tree2,e2Variant ->
                setTree(tree2,make(e1Variant,e2Variant),"")))));
    simplifyExpr(exprVariants,identities);
}

simplifyExpr(exprVariantsTree,identities)
{
    minDif = ref 0;
    simplifiedExprVariants = foldi(tree2pairs(exprVariantsTree),makeTree(),\i,tree1,exprVariant ->
    {
        exprVariantsSimplified = compareAndExchangeArr(exprVariant.first,identities,
            makeTree1(exprVariant.first,""));
        setTreeValues(tree1, tree2pairs(
            foldi(tree2pairs(exprVariantsSimplified),makeTree(),\j,tree2,exprVariantSimplified ->
            {
                dif = getDifficulty(exprVariantSimplified.first);
                if (0 == j && 0 == i || dif < ^ minDif)
                    minDif := dif;
                if (dif == ^minDif)
                    setTree(tree2,exprVariantSimplified.first,"")
                else
                    tree2;
            })));
    });
    fold(tree2pairs(simplifiedExprVariants),[],
        \acc,simplifiedExprVariant ->
            if (getDifficulty(simplifiedExprVariant.first) == ^minDif)
                arrayPush(acc,simplifiedExprVariant.first)
            else
                acc);
}

makeDiv(e1,e2)
{
    Div(e1,e2);
}

makeProduct(e1,e2)
{
    Product(e1,e2);
}

makeSub(e1,e2)
{
    Sub(e1,e2);
}

makeAdd(e1,e2)
{
    Add(e1,e2);
}
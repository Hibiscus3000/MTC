import ds/tree;
import MTC/lab7/e2s;

export
{
    equalsTo(expr : Expr, identity : Expr,designationTree : Tree<Expr,Var>) -> Maybe<Tree<Expr,Var>>;
}

equalsTo(expr, identity, designationTree)
{
    if (identity.structname == "Rational" || identity.structname == "Var")
    {
        value = lookupTree(designationTree,identity);
        eitherMap(value,\val -> if (expr == val) Some(designationTree) else None(),
            Some(setTree(designationTree,identity,expr)));
    }
    else
    {
        switch(expr : Expr)
        {
            Div(e11,e12) :
                switch(identity : Expr)
                {
                    Div(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Product(e11,e12) :
                switch(identity : Expr)
                {
                    Product(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Add(e11,e12) :
                switch(identity : Expr)
                {
                    Add(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Sub(e11,e12) :
                switch(identity : Expr)
                {
                    Sub(e21,e22) : getTree(e11,e12,e21,e22,designationTree);                       
                    default : None();
                }
            Neg(e1) :
                switch(identity : Expr)
                {
                    Neg(e2) : equalsTo(e1,e2,designationTree);
                    default : None();
                }
            default : None();
        }
    }
}

getTree(e11,e12,e21,e22,designationTree)
{
    tree1 = equalsTo(e11,e21,designationTree);
    maybeBind(tree1,\tree -> equalsTo(e12,e22,tree));
}
import ds/arrayutils;
import MTC/lab5/simple_algebra_grammar;
import string;

export
{
    RPNOperand ::= RPNOperation,Int;
    RPNOperation(op : string);
    e2PN(e : Expr) -> string;
    e2RPN(e : Expr) -> string;
    RPN2e(rpn : string) -> Maybe<Expr>;
    PN2s(pn : string) -> string;
    RPN2s(rpn : string) -> string;
    s2PN(str : string) -> string;
    s2RPN(str : string) -> string;
    calcRPN(rpn : string) -> int;
    calcPN(pn : string) -> int;
    PNAlgebraGrammar() -> [PegOp]; 
}

PNAlgebraGrammarOp : ref Maybe<[PegOp]> = ref None();
RPNAlgebraGrammarOp : ref Maybe<[PegOp]> = ref None();

PNAlgebraGrammar()
{
	onlyOnce(PNAlgebraGrammarOp, \ -> {
		compilePegGrammar("#include MTC/lab6/PN_algebra_grammar.lingo");
	});
}

RPNAlgebraGrammar()
{
    onlyOnce(RPNAlgebraGrammarOp, \ -> {
		compilePegGrammar("#include MTC/lab6/RPN_algebra_grammar.lingo");
	});
}

e2PN(e)
{
    switch (e : Expr)
    {
        Add(e1,e2) : "+ " + e2PN(e1) + " " + e2PN(e2);
        Product(e1,e2) : "* " + e2PN(e1) + " " + e2PN(e2);
        Int(i) : i2s(i);
    }
}

e2RPN(e)
{
    switch (e : Expr)
    {
        Add(e1,e2) : e2RPN(e1) + " " + e2RPN(e2) + " +";
        Product(e1,e2) : e2RPN(e1) + " " + e2RPN(e2) + " *";
        Int(i) : i2s(i);
    }
}

RPN2e(rpn)
{
    stack = parsic(RPNAlgebraGrammar(),rpn,defaultPegActions);
    exprs = processStack(stack,ref []);
    if (1 != length(exprs))
        None()
    else
        Some(exprs[0]);
}

processStack(stack,exprStack) -> [Expr]
{
    if (0 == length(stack))
        ^exprStack
    else
    {
        operand = stack[0];
        switch (operand : RPNOperand)
        {
            Int(i) :
            {
                refArrayPush(exprStack,operand);
                processStack(removeIndex(stack,0),exprStack);
            }
            RPNOperation(op) :
            {
                eitherMap(maybeMap2(\op1,op2 -> (if ("*" == op) Product(op1,op2)
                    else Add(op1,op2))) (exprStackPop(exprStack),exprStackPop(exprStack)),
                    \expr : Expr ->
                        {
                            refArrayPush(exprStack,expr);
                            processStack(removeIndex(stack,0),exprStack);
                        },[]);
            }
        }
    }
}

exprStackPop(exprStack) -> Maybe<Expr>
{
    if (0 == length(^exprStack))
        None()
    else
    {
        popedOperand = ^exprStack[length(^exprStack) - 1];
        exprStack := removeLastElement(^exprStack);
        Some(popedOperand);
    }
}

RPN2e2(rpn)
{
    RPN2eOpArg(rpn,[],"");
}

RPN2eOpArg(rpn,exprArr,number)
{
    if (0 == strlen(rpn))
        exprArr[0]
    else
    {
        curChar = getCharAt(rpn,0);
        if (isDigit(getCharAt(rpn,0)))
            RPN2eOpArg(substring(rpn,1,strlen(rpn) - 1),exprArr,strGlue([number,curChar],""))
        else
        {
            newExprArr = if ("" == number) exprArr else arrayPush(exprArr,Int(s2i(number)));
            if (" " == curChar)
                RPN2eOpArg(substring(rpn,1,strlen(rpn) - 1),newExprArr,"")
            else
            {
                newExprArrLength = length(newExprArr);
                if (newExprArrLength < 2)
                    Int(0)
                else
                {
                    firstExp = newExprArr[newExprArrLength - 1];
                    secondExp = newExprArr[newExprArrLength - 2];
                    if ("*" == curChar) 
                        RPN2eOpArg(substring(rpn,1,strlen(rpn) - 1),
                            arrayPush(removeLastElement(
                                removeLastElement(newExprArr)),Product(firstExp,secondExp)),"")
                    else
                    {
                        if ("+" == curChar)
                            RPN2eOpArg(substring(rpn,1,strlen(rpn) - 1),
                                arrayPush(removeLastElement(
                                    removeLastElement(newExprArr)),Add(firstExp,secondExp)),"")
                        else
                            Int(0);
                    }
                }
            }
        }
    }
}

PN2s(pn)
{
    e2s(parsic(PNAlgebraGrammar(), pn, defaultPegActions));
}

RPN2s(rpn)
{
    eitherMap(RPN2e(rpn),e2s,"INVALID");
}

s2PN(str)
{
    e2PN(parsic(simpleAlgebraGrammar(),str,defaultPegActions));
}

s2RPN(str)
{
    e2RPN(parsic(simpleAlgebraGrammar(),str,defaultPegActions));
}

calcRPN(rpn)
{
    eitherMap(RPN2e(rpn),calc,0);
}

calcPN(pn)
{
    calc(parsic(PNAlgebraGrammar(),pn,defaultPegActions));
}


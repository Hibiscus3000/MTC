import MTC/lab11/NeMo_AST;

export
{
    program2s(program : Program) -> string;
    body2s(body : Body, nesting : string) -> string;
    test2s(test : Test, nesting : string) -> string;
    function2s(function : Function) -> string;
    relation2s(relation : Relation,underOperationPriority : int) -> string;
    relationAtom2s(relationAtom : RelationAtom) -> string;
    declarations2s(declarations : [Declaration],nesting : string) -> string;
    declaration2s(declaration : Declaration) -> string;
    expr2s(expr : Expr) -> string;
    operand2s(operand : Operand) -> string;
}

program2s(program)
{
    declarations2s(program.declarations,"") + body2s(program.body,"");
}

declarations2s(declarations,nesting)
{
    if (0 == length(declarations))
        ""
    else
    {
        currentDeclaration = declarations[length(declarations) - 1];
        declarations2s(removeIndex(declarations,length(declarations) - 1),nesting) + nesting +
            declaration2s(currentDeclaration) + ";\n";
    }
}

declaration2s(declaration)
{
    "VAR " + operand2s(declaration.var) + " : " + type2s(declaration.type);
}

type2s(type : Type)
{
    switch (type : Type)
    {
        IntType() : "INT";
        ArrayType(indexingType, valueType) : "[" +
            switch(indexingType : Type)
            {
                IntType() : "";
                ArrayType(subIndexingType,subValueType) : type2s(indexingType) + " ARRAY OF ";
            }
            + type2s(valueType) + "]";
    }
}

body2s(body,nesting)
{
    (if (body.structname != "Iteration") nesting else "") +
    switch(body : Body)
    {
        Assignment(varApply,expr) : varApply2s(varApply) + " := " + expr2s(expr);
        Sequence(bodies) : "{\n"
            + fold(bodies,"",\acc,body1 -> acc + body2s(body1,nesting + "\t")
                + (if (body1.structname == "Sequence") "" else ";") + "\n")
            + nesting + "}";
        Choice(bodies) :
        {
            firstBody = bodies[0];
            "{\n"
            + fold(removeIndex(bodies,0),body2s(firstBody,nesting + "\t"),\acc,body1 -> acc + " U\n" + body2s(body1,nesting + "\t"))
            + "\n" + nesting + "}";
        }
        Iteration(sequence) : body2s(sequence,nesting) + "*";
        Test() : test2s(body,nesting);
        Function() : function2s(body);
    }
}

function2s(function)
{
    switch(function : Function)
    {
        Print(expr) : "print(" + expr2s(expr) + ")";
    }
}

test2s(test,nesting)
{
    switch (test : Test)
    {
        SimpleTest(relation) : "(" + relation2s(relation,0) + ") ?";
        While(relation,body) : "while (" + relation2s(relation,0) + ")\n" + body2s(body, nesting
                + (if (body.structname != "Sequence") "\t" else ""));
        If(relation,op_if,op_else) : "if (" + relation2s(relation,0) + ")\n" + body2s(op_if,nesting
                + (if (op_if.structname != "Sequence") "\t" else ""))
            + (if (1 == length(op_else)) "\n" + nesting + "else\n" + body2s(op_else[0],nesting
                    + (if (op_else[0].structname != "Sequence") "\t" else "")) else "");
    }
}

expr2s(expr)
{
    switch(expr : Expr)
    {
        Arithmetic() : arithmetic2s(expr,0);
        Update(array,index,new_value) : "UPD(" + expr2s(array) + ", " + expr2s(index)
            + ", " + expr2s(new_value) + ")";
    }
}

// OPERATION PRIORITIES
// 1 for Add and Sub
// 2 for subtrahend, Product and Div
// 3 for divider and Neg
// 4 for Var and Rational

arithmetic2s(arithm, underOperationPriority)
{
	operationPriority = ref 0;
	result = switch (arithm : Arithmetic)
	{
		Div(a1,a2) :
		{
			operationPriority := 2;
			arithmetic2s(a1,2) + " / " + arithmetic2s(a2,3);
		}
		Product(a1,a2) :
		{
			operationPriority := 2;
			arithmetic2s(a1,2) + " * " + arithmetic2s(a2,2);
		}
		Add(a1,a2) :
		{
			operationPriority := 1;
            arithmetic2s(a1,1) + " + " + arithmetic2s(a2,1);
		}
		Sub(a1,a2) :
		{
			operationPriority := 1;
            arithmetic2s(a1,1) + " - " + arithmetic2s(a2,2);
		}
		Neg(a1) :
		{
			operationPriority := 3;
			"-" + arithmetic2s(a1,3);
		}
        Operand() :
        {
            operationPriority := 4;
            operand2s(arithm);
        }
	}
	if (^operationPriority < underOperationPriority)
		"(" + result + ")"
	else
		result;
}

operand2s(operand)
{
    switch(operand : Operand)
    {
        Int(i) : i2s(i);
        VarApply() : 
            switch (operand : VarApply)
            {
                Var(s) : s;
                Apply(array,index) : "APP(" + expr2s(array) + ", " + expr2s(index) + ")";
            }
    }
}

varApply2s(varApply)
{
    switch (varApply : VarApply)
    {
        Var(s) : s;
        Apply(array,index) : expr2s(array) + "[" + expr2s(index) + "]";
    }
}

// BINARY OPERATIONS PRIORITIES
// 1 for Or
// 2 for And
// 3 for Not

relation2s(relation,underOperationPriority)
{
    operationPriority = ref 0;
    result = switch(relation : Relation)
    {
        Or(r1,r2) :
        {   
            operationPriority := 1;
            relation2s(r1,1) + " || " + relation2s(r2,1);
        }
        And(r1,r2) :
        {
            operationPriority := 2;
            relation2s(r1,2) + " && " + relation2s(r2,2);
        }
        Not(r) :
        {
            operationPriority := 3;
            "~" + relation2s(r,3);
        }
        RelationAtom() : 
        {
            operationPriority := 4;
            relationAtom2s(relation);
        }
    }
    if (underOperationPriority > ^operationPriority)
        "(" + result + ")"
    else
        result;
}

relationAtom2s(relationAtom)
{
    switch(relationAtom : RelationAtom)
    {
        LesserEquals(a1,a2) : arithmetic2s(a1,0) + " <= " + arithmetic2s(a2,0);
        GreaterEquals(a1,a2) : arithmetic2s(a1,0) + " >= " + arithmetic2s(a2,0);
        Lesser(a1,a2) : arithmetic2s(a1,0) + " < " + arithmetic2s(a2,0);
        Greater(a1,a2) : arithmetic2s(a1,0) + " > " + arithmetic2s(a2,0);
        Equals(a1,a2) : arithmetic2s(a1,0) + " == " + arithmetic2s(a2,0);
        NotEquals(a1,a2) : arithmetic2s(a1,0) + " != " + arithmetic2s(a2,0);
    }
}


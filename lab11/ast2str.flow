import MTC/lab11/get_type;

export
{
    ast2sCheckRs(program : Program) -> string;
    ast2s(program : Program) -> string;
    ast2file(program : Program, path : string) -> bool;
    checkErrors(program : Program) -> string;
    body2s(body : Body,nesting : string) -> string;
    relation2s(relation : Relation,underOperationPriority : int) -> string;
    declarations2s(declarations : [Declaration]) -> string;

    checkDeclaration(declarations : [Declaration]) -> Pair<string,Tree<Var,Type>>;
    formTestErrorsMsg(relation : Relation,declsTree : Tree<Var,Type>,prefix : string,postfix : string) -> string;
    checkExpr(expr : Expr,declsTree : Tree<Var,Type>) -> Pair<[string],[string]>;
    checkOperand(operand : Operand,declsTree : Tree<Var,Type>) -> Pair<[string],[string]>;
    formUndeclaredVarsMsg(varNames : [string], bodyStr : string) -> string;
    isComplicated(expr : Expr) -> bool;
}

ast2sCheckRs(program)
{
    errorMsg = checkErrors(program);
    if ("" == errorMsg)
        ast2s(program)
    else
        errorMsg;
}

ast2s(program)
{
    declarations2s(program.declarations) + body2s(program.body,"");
}

ast2file(program,path)
{
    setFileContent(path,ast2sCheckRs(program));
}

declarations2s(declarations)
{
    if (0 == length(declarations))
        ""
    else
    {
        currentDeclaration = declarations[length(declarations) - 1];
        declarations2s(removeIndex(declarations,length(declarations) - 1)) + 
            declaration2s(currentDeclaration) + "\n";
    }
}

declaration2s(declaration)
{
    "VAR " + operand2s(declaration.var) + " : " + type2s(declaration.type) + ";";
}

type2s(type : Type)
{
    switch (type : Type)
    {
        IntType() : "INT";
        ArrayType(indexingType, valueType) : "[" +
            switch(indexingType : Type)
            {
                IntType() : "";
                ArrayType(subIndexingType,subValueType) : type2s(indexingType) + " ARRAY OF ";
            }
            + type2s(valueType) + "]";
    }
}

body2s(body,nesting)
{
    (if (body.structname != "Iteration") nesting else "") +
    switch(body : Body)
    {
        Assignment(varApply,expr) : varApply2s(varApply) + " := " + expr2s(expr);
        Sequence(bodies) : "{\n"
            + fold(bodies,"",\acc,body1 -> acc + body2s(body1,nesting + "\t")
                + (if (body1.structname == "Sequence") "" else ";") + "\n")
            + nesting + "}";
        Choice(bodies) :
        {
            firstBody = bodies[0];
            "{\n"
            + fold(removeIndex(bodies,0),body2s(firstBody,nesting + "\t"),\acc,body1 -> acc + " U\n" + body2s(body1,nesting + "\t"))
            + "\n" + nesting + "}";
        }
        Iteration(sequence) : body2s(sequence,nesting) + "*";
        Test() : test2s(body,nesting);
        Function() : function2s(body);
    }
}

function2s(function)
{
    switch(function : Function)
    {
        Print(expr) : "print(" + expr2s(expr) + ")";
    }
}

test2s(test,nesting)
{
    switch (test : Test)
    {
        SimpleTest(relation) : "(" + relation2s(relation,0) + ") ?";
        While(relation,body) : "while (" + relation2s(relation,0) + ")\n" + body2s(body, nesting
                + (if (body.structname != "Sequence") "\t" else ""));
        If(relation,op_if,op_else) : "if (" + relation2s(relation,0) + ")\n" + body2s(op_if,nesting
                + (if (op_if.structname != "Sequence") "\t" else ""))
            + (if (1 == length(op_else)) "\n" + nesting + "else\n" + body2s(op_else[0],nesting
                    + (if (op_else[0].structname != "Sequence") "\t" else "")) else "");
    }
}

expr2s(expr)
{
    switch(expr : Expr)
    {
        Arithmetic() : arithmetic2s(expr,0);
        Update(array,index,new_value) : "UPD(" + expr2s(array) + ", " + expr2s(index)
            + ", " + expr2s(new_value) + ")";
    }
}

// OPERATION PRIORITIES
// 1 for Add and Sub
// 2 for subtrahend, Product and Div
// 3 for divider and Neg
// 4 for Var and Rational

arithmetic2s(arithm, underOperationPriority)
{
	operationPriority = ref 0;
	result = switch (arithm : Arithmetic)
	{
		Div(a1,a2) :
		{
			operationPriority := 2;
			arithmetic2s(a1,2) + " / " + arithmetic2s(a2,3);
		}
		Product(a1,a2) :
		{
			operationPriority := 2;
			arithmetic2s(a1,2) + " * " + arithmetic2s(a2,2);
		}
		Add(a1,a2) :
		{
			operationPriority := 1;
            arithmetic2s(a1,1) + " + " + arithmetic2s(a2,1);
		}
		Sub(a1,a2) :
		{
			operationPriority := 1;
            arithmetic2s(a1,1) + " - " + arithmetic2s(a2,2);
		}
		Neg(a1) :
		{
			operationPriority := 3;
			"-" + arithmetic2s(a1,3);
		}
        Operand() :
        {
            operationPriority := 4;
            operand2s(arithm);
        }
	}
	if (^operationPriority < underOperationPriority)
		"(" + result + ")"
	else
		result;
}

operand2s(operand)
{
    switch(operand : Operand)
    {
        Int(i) : i2s(i);
        VarApply() : 
            switch (operand : VarApply)
            {
                Var(s) : s;
                Apply(array,index) : "APP(" + expr2s(array) + ", " + expr2s(index) + ")";
            }
    }
}

varApply2s(varApply)
{
    switch (varApply : VarApply)
    {
        Var(s) : s;
        Apply(array,index) : expr2s(array) + "[" + expr2s(index) + "]";
    }
}

// BINARY OPERATIONS PRIORITIES
// 1 for Or
// 2 for And
// 3 for Not

relation2s(relation,underOperationPriority)
{
    operationPriority = ref 0;
    result = switch(relation : Relation)
    {
        Or(r1,r2) :
        {   
            operationPriority := 1;
            relation2s(r1,1) + " || " + relation2s(r2,1);
        }
        And(r1,r2) :
        {
            operationPriority := 2;
            relation2s(r1,2) + " && " + relation2s(r2,2);
        }
        Not(r) :
        {
            operationPriority := 3;
            "~" + relation2s(r,3);
        }
        RelationAtom() : relationAtom2s(relation);
    }
    if (underOperationPriority > ^operationPriority)
        "(" + result + ")"
    else
        result;
}

relationAtom2s(relationAtom)
{
    switch(relationAtom : RelationAtom)
    {
        LesserEquals(a1,a2) : arithmetic2s(a1,0) + " <= " + arithmetic2s(a2,0);
        GreaterEquals(a1,a2) : arithmetic2s(a1,0) + " >= " + arithmetic2s(a2,0);
        Lesser(a1,a2) : arithmetic2s(a1,0) + " < " + arithmetic2s(a2,0);
        Greater(a1,a2) : arithmetic2s(a1,0) + " > " + arithmetic2s(a2,0);
        Equals(a1,a2) : arithmetic2s(a1,0) + " == " + arithmetic2s(a2,0);
        NotEquals(a1,a2) : arithmetic2s(a1,0) + " != " + arithmetic2s(a2,0);
    }
}

checkErrors(program)
{
    declsCheck = checkDeclaration(program.declarations);
    errorMsg = declsCheck.first + checkBody(program.body,declsCheck.second);
    if (errorMsg != "")
        "INVALID PROGRAM!!!\n" + errorMsg
    else
        "";
}

checkDeclaration(decls)
{   
    errorMsg = ref "";
    declsTree = fold(decls,makeTree(),\tree,decl ->
    {
        if (isSome(lookupTree(tree,decl.var))) 
        {
            if (^errorMsg == "")
                errorMsg := ^errorMsg + "Redeclaration of variable \"" + operand2s(decl.var)
                    +"\"" + " in \"" + declaration2s(decl) + "\"\n";
            tree;
        }
        else
            setTree(tree,decl.var,decl.type);
    });
    Pair(^errorMsg,declsTree);
}

checkBody(body, declsTree)
{
    switch(body : Body)
    {
        Assignment(varApply,expr) :
        {
            exprErrorsPair = checkExpr(expr,declsTree);
            exprUndeclaredVars = exprErrorsPair.second;
            varApplyErrorsPair = checkOperand(varApply,declsTree);
            varApplyUndeclaredVariables = varApplyErrorsPair.second;
            undeclaredVariables = concat(varApplyUndeclaredVariables,exprUndeclaredVars);
            typeMismatches = concat(varApplyErrorsPair.first,exprErrorsPair.first);
            if (0 != length(undeclaredVariables))
                formUndeclaredVarsMsg(undeclaredVariables,body2s(body,""))
            else
            {
                (if (isComplicated(expr) && !isInt(expr,declsTree))
                    "Right side of \"" + body2s(body,"") + "\" is not INT\n"
                else
                    (if (getExprType(varApply,declsTree) != getExprType(expr,declsTree))
                        "Types of right and left sides of assignment \"" + body2s(body,"") + "\" do not match\n"
                    else
                        ""))
                + fold(typeMismatches,"",\acc,typeMismatch -> acc + typeMismatch + "\n");
            }
        }
        Sequence(bodies) : fold(bodies,"",\acc,body1 -> acc + checkBody(body1,declsTree));
        Choice(bodies) : fold(bodies,"",\acc,body1 -> acc + checkBody(body1,declsTree));
        Iteration(sequence) : checkBody(sequence,declsTree);
        Test() : checkTest(body,declsTree);
        Function() : checkFunction(body,declsTree);
    }
}

checkFunction(function,declsTree)
{
    switch(function : Function)
    {
        Print(expr) : 
        {
            exprErrorsPair = checkExpr(expr,declsTree);
            undeclaredVariables = exprErrorsPair.second;
            typeMismatches = exprErrorsPair.first;
            if (0 != length(undeclaredVariables))
                formUndeclaredVarsMsg(undeclaredVariables,"print(" + expr2s(expr) + ")")
            else
                {
                    (if (isSome(getExprType(expr,declsTree)))
                        ""
                    else
                        "Invalid expression type in \"" + function2s(function) + "\"\n")
                    + fold(typeMismatches,"",\acc,typeMismatch -> acc + typeMismatch + "\n");
                }
        }
    }
}

checkTest(test,declsTree : Tree<Var,Type>)
{
    switch (test : Test)
    {
        SimpleTest(relation) : formTestErrorsMsg(relation,declsTree,"(",") ?")
        While(relation,body) :
        {   
            formTestErrorsMsg(relation,declsTree,"while (",")")
            + checkBody(body,declsTree);
        }
        If(relation,op_if,op_else) :
        {
            formTestErrorsMsg(relation,declsTree,"if (",")")
            + checkBody(op_if,declsTree)
            + if (1 == length(op_else)) checkBody(op_else[0],declsTree) else "";
        }
    }
}

formTestErrorsMsg(relation,declsTree,prefix,postfix)
{
    relationValidity = checkRelation(relation,declsTree);
    undeclaredVariables = relationValidity.second;
    typeMismatches = relationValidity.first;
    if (0 != length(undeclaredVariables))
        formUndeclaredVarsMsg(undeclaredVariables,prefix + relation2s(relation,0) + postfix)
    else
        fold(typeMismatches,"",\acc,error -> acc + error + "\n");
}

checkExpr(expr,declsTree) -> Pair<[string],[string]>
{
    switch(expr : Expr)
    {
        Arithmetic() : checkArithmetic(expr,declsTree);
        Update(array,index,new_value) :
        {
            arrayType = getExprType(array,declsTree);
            errorMsg = eitherMap(arrayType,\arrType ->
                switch(arrType : Type)
                {
                    ArrayType(indexingType,valueType) :
                    {
                        indexingError = checkType(index,indexingType,"indexing","Second",declsTree,expr);
                        valueError = checkType(new_value,valueType,"value","Third",declsTree,expr);
                        if ("" != indexingError && "" != valueError)
                            indexingError + "\n" + valueError
                        else
                            indexingError + valueError;
                    }
                    default : firstOperandIsNotAnArray(expr);
                },firstOperandIsNotAnArray(expr))
            arrayIndexErrMsgs = returnErrorMsgsAndUndeclared(errorMsg, array, index, declsTree);
            valueCheck = checkExpr(new_value,declsTree);
            Pair(concat(arrayIndexErrMsgs.first,valueCheck.first),
                concat(arrayIndexErrMsgs.second,valueCheck.second));
        }
    }
}

checkArithmetic(arithm,declsTree) -> Pair<[string],[string]>
{
	switch (arithm : Arithmetic)
	{
		Div(a1,a2) : Pair([],getUndeclaredVariablesArithm(a1,a2,declsTree));
		Product(a1,a2) : Pair([],getUndeclaredVariablesArithm(a1,a2,declsTree));
		Add(a1,a2) : Pair([],getUndeclaredVariablesArithm(a1,a2,declsTree));
		Sub(a1,a2) : Pair([],getUndeclaredVariablesArithm(a1,a2,declsTree));
		Neg(a1) : checkArithmetic(a1,declsTree);
        Operand() : checkOperand(arithm,declsTree);
	}
}

getUndeclaredVariablesArithm(a1,a2,declsTree) -> [string]
{
    a1Checked = checkArithmetic(a1,declsTree);
    a2Checked = checkArithmetic(a2,declsTree);
    concat(a1Checked.second,a2Checked.second);
}

returnErrorMsgsAndUndeclared(errorMsg, array, index, declsTree) -> Pair<[string],[string]>
{
    arrayCheck = checkExpr(array,declsTree);
    indexCheck = checkExpr(index,declsTree);
    Pair(concat(concat(if ("" != errorMsg) [errorMsg] else [],
        arrayCheck.first),indexCheck.first),concat(arrayCheck.second,indexCheck.second));
}

checkType(smth, smthType, smthName, operandNum, declsTree, functional : Functional)
{
    if (!checkTypeMatching(smth,smthType,declsTree))
        operandNum + " operand's type in \"" + expr2s(functional)
            + "\" and " + smthName + " type of array do not match"
    else
        "";
}

firstOperandIsNotAnArray(functional : Functional)
{
    "First operand in \"" + expr2s(functional) + "\" is not an ARRAY";
}

checkOperand(operand,declsTree : Tree<Var,Type>) -> Pair<[string],[string]>
{
    switch(operand : Operand)
    {
        Int(i) : Pair([],[]);
        VarApply() :
            switch (operand : VarApply)
            {
                Var(s) : Pair([],isDeclared(operand,declsTree));
                Apply(array,index) :
                {
                    arrayType = getExprType(array,declsTree);
                    errorMsg = eitherMap(arrayType,\arrType ->
                    switch(arrType : Type)
                    {
                        ArrayType(indexingType,valueType) : checkType(index,indexingType,"indexing",
                            "Second",declsTree,operand);
                        default : firstOperandIsNotAnArray(operand);
                    },firstOperandIsNotAnArray(operand));
                    returnErrorMsgsAndUndeclared(errorMsg, array, index, declsTree)
                }
            }
    }
}

checkRelation(relation,declsTree)
{
     switch(relation : Relation)
    {
        Or(r1,r2) : getRelationValidity(r1,r2,declsTree);
        And(r1,r2) : getRelationValidity(r1,r2,declsTree);
        Not(r) : checkRelation(r,declsTree)
        RelationAtom() : checkRelationAtom(relation,declsTree);
    }
}

getRelationValidity(r1,r2,declsTree)
{
    r1Pair = checkRelation(r1,declsTree);
    r2Pair = checkRelation(r2,declsTree);
    Pair(concat(r1Pair.first,r2Pair.first),concat(r1Pair.second,r2Pair.second));
}

checkRelationAtom(relationAtom, declsTree : Tree<Var,Type>) -> Pair<[string],[string]>
{
    switch(relationAtom : RelationAtom)
    {
        LesserEquals(a1,a2) : getRelationAtomValidity(a1,a2,declsTree,relationAtom);
        GreaterEquals(a1,a2) : getRelationAtomValidity(a1,a2,declsTree,relationAtom);
        Lesser(a1,a2) : getRelationAtomValidity(a1,a2,declsTree,relationAtom);
        Greater(a1,a2) : getRelationAtomValidity(a1,a2,declsTree,relationAtom);
        Equals(a1,a2) : getRelationAtomValidity(a1,a2,declsTree,relationAtom);
        NotEquals(a1,a2) : getRelationAtomValidity(a1,a2,declsTree,relationAtom);
    }
}

getRelationAtomValidity(a1,a2,declsTree,relationAtom) -> Pair<[string],[string]>
{
    undeclaredVariables = getUndeclaredVariablesArithm(a1,a2,declsTree);
    leftSideIsInt = ref true;
    rightSideIsInt = ref true;
    if (0 == length(undeclaredVariables))
    {
        if (!isInt(a1,declsTree))
            leftSideIsInt := false;
        if (!isInt(a2,declsTree))
            rightSideIsInt := false;
        if (^leftSideIsInt && ^rightSideIsInt)
            Pair([],[])
        else
            Pair([(if (!^leftSideIsInt && !^rightSideIsInt) "Types of left and right sides of " else "Type of "
                    + (if (!^rightSideIsInt) "right side of " else "left side of "))
                + "\"" + relationAtom2s(relationAtom) + "\""
                + (if (!^leftSideIsInt && !^rightSideIsInt) " are " else " is ") 
                + "not INT"],[]);
    }
    else
        Pair([],undeclaredVariables);
}

isDeclared(var, declsTree) -> [string]
{
    if (!isSome(lookupTree(declsTree,var))) [operand2s(var)] else [];
}   

formUndeclaredVarsMsg(varNames, bodyStr)
{
    uniqueVarNames = uniq(varNames);
    "Attempting to use undeclared variable" + (if (1 != length(uniqueVarNames)) "s " else " ")
    + fold(uniqueVarNames,"",\acc,varName -> acc + (if (acc != "") ", " else "") + varName)
    + " in \"" + bodyStr + "\"\n";
}

//returns true if expr is more complicated then operand access

isComplicated(expr)
{
    switch(expr : Expr)
    {
        Arithmetic() :
            switch (expr : Arithmetic)
            {
                Operand() : false;
                default : true;
            }
        Update(array,index,new_value) : false;
    }
}
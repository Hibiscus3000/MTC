import lingo/pegcode/driver;

export
{
    Program(declarations : [Declaration], body : Body);

    Declaration(var : Var, type : Type);
    Type ::= IntType, ArrayType;
        IntType();
        ArrayType(indexingType : Type, valueType : Type);

    Body ::= Assignment, Test, Sequence, Choice, Iteration, Function;
        Assignment(varApply : VarApply, expr : Expr);
        Sequence(bodies : [Body]);
        Choice(bodies : [Body]);
        Iteration(sequence : Sequence);

    Function ::= Print;
        Print(expr : Expr);
    Expr ::= Arithmetic, Update;

    Arithmetic ::= Div,Product,Sub,Add,Neg,Operand;
        Div(a1 : Arithmetic, a2 : Arithmetic);
        Product(a1 : Arithmetic, a2 : Arithmetic);
        Sub(a1 : Arithmetic, a2 : Arithmetic);
        Add(a1 : Arithmetic, a2 : Arithmetic);
        Neg(a1 : Arithmetic);

    Functional ::= Apply,Update;
        Apply(array : Expr, index : Expr);
        Update(array : Expr, index : Expr, new_value : Expr);
    
    Test ::= SimpleTest,While,If;
        SimpleTest(relation : Relation);
        While(relation : Relation,body : Body);
        If(relation : Relation, op_if : Body, op_else : [Body]);

    Relation ::= Or, And, Not, RelationAtom;
        Or(r1 : Relation, r2 : Relation);
        And(r1 : Relation, r2 : Relation);
        Not(r : Relation);
    RelationAtom ::= LesserEquals, GreaterEquals, Lesser, Greater, Equals, NotEquals;
        LesserEquals(a1 : Arithmetic, a2 : Arithmetic);
        GreaterEquals(a1 : Arithmetic, a2 : Arithmetic);
        Lesser(a1 : Arithmetic, a2 : Arithmetic);
        Greater(a1 : Arithmetic, a2 : Arithmetic);
        Equals(a1 : Arithmetic, a2 : Arithmetic);
        NotEquals(a1 : Arithmetic, a2 : Arithmetic);

    Operand ::= Int, VarApply;    
    VarApply ::= Var, Apply;
        Int(i : int);
        Var(s : string);
    
    parseNeMo(nemoProg : string) -> Program;
    parseNeMoFile(filename : string) -> Program;

    buildSub(xs : [flow]) -> Arithmetic;
    buildDiv(xs : [flow]) -> Arithmetic;
}

NeMoGrammarOp : ref Maybe<[PegOp]> = ref None();

subDivChoicePegActions =
{
	tSub = setTree(defaultPegActions.t, "buildSub", buildSub);
	tDiv = setTree(tSub,"buildDiv",buildDiv);
    tChoice = setTree(tDiv,"buildChoice",buildChoice);
	SemanticActions(tChoice);
}

buildSub(xs)
{
    fold(xs[1],xs[0],\acc,x -> Sub(acc,x));
}

buildDiv(xs)
{
    fold(xs[1],xs[0],\acc,x -> Div(acc,x));    
}

buildChoice(xs : [flow]) -> Choice
{
    Choice(concat([xs[0]],xs[1]));
}

NeMoGrammar()
{
	onlyOnce(NeMoGrammarOp, \ -> {
		compilePegGrammar("#include MTC/lab11/NeMo_grammar.lingo");
	});
}

parseNeMo(nemoProg)
{
    parsic(NeMoGrammar(),nemoProg,subDivChoicePegActions);
}

parseNeMoFile(filename)
{
    parseNeMo(getFileContent(filename));
}

program = declarations:decls sequence:sequence ws* {Program(:decls,:sequence)};

declarations = '{' declaration*:decls '}' {:decls} | declaration*;
declaration = ws* "VAR" ws var:v ws* ':' ws* type:t ';' ws+ {Declaration(:v,:t)};
type = "INT" {IntType()}
    | '[' type:ind ws+ "ARRAY" ws+ "OF" ws+ type:val ']' {ArrayType(:ind,:val)}
    | '[' type:t ']' {ArrayType(:t,IntType())};

body_seq = body | sequence;
body = function
    | test
    | assignment
    | '{' ws* body_seq:b choice+:chs ws* '}' {buildChoice(:b,:chs)}
    | iteration;
choice = ws+ 'U' ws+ body_seq:b {:b};
sequence = '{' ws* subsequence*:ss '}' {Sequence(:ss)};
iteration = '{' ws* subsequence+:ss "}*" {Iteration(Sequence(:ss))};
subsequence = body:b ';' ws+ {:b} | sequence:s ws+ {:s};

function = print;
print = "print(" expr:e ')' {Print(:e)};

assignment = var:v ws* ":=" expr:e {Assignment(:v,:e)};
expr = update | arithmetic;

arithmetic = sub:s ws* '+' ws* arithmetic:a {Add(:s,:a)} | sub;
sub = prod:p subsub*:s {buildSub(:p,:s)}; 
subsub = ws* '-' prod:p {:p};
prod = div:d ws* '*' ws* prod:p {Product(:d,:p)} | div;
div = neg:n subdiv*:d {buildDiv(:n,:d)};
subdiv = ws* '/' neg:n {:n};
neg = ws* '-' neg:n {Neg(:n)} | parentheses;
parentheses = ws* '(' ws* arithmetic:a ws* ')' {:a} | ws* operand;

apply = ws* "APP(" (update | apply_var):array ',' ws? expr:index ')' {Apply(:array,:index)}
     | ws* (update | var):array '[' expr:index ']' {Apply(:array,:index)};
update = ws* "UPD(" (update | apply_var):array ',' ws? expr:index ',' ws? expr:new_value ')'
    {Update(:array,:index,:new_value)}; 

test = simple_test | while | if;
simple_test = '(' ws* or:or ws* ") ?" {SimpleTest(:or)};
while = "while" ws+ '(' or:or ')' ws+ body_seq:b {While(:or,:b)};
if = "if" ws+ '(' or:or ')' ws+ body_seq:if else?:else {If(:or,:if,:else)};
else = ws* "else" ws+ body_seq:b {:b};

or = and:and ws+ "||" ws+ or:or {Or(:and,:or)} | and;
and = not:not ws+ "&&" ws+ and:and {And(:not,:and)} | not;
not = '~' ws* relation_atom:ra {Not(:ra)} | relation_atom;
relation_atom = arithmetic:a1 ws* "<=" ws* arithmetic:a2 {LesserEquals(:a1,:a2)}
    | arithmetic:a1 ws* ">=" ws* arithmetic:a2 {GreaterEquals(:a1,:a2)}
    | arithmetic:a1 ws* '<' ws* arithmetic:a2 {Lesser(:a1,:a2)}
    | arithmetic:a1 ws* '>' ws* arithmetic:a2 {Greater(:a1,:a2)}
    | arithmetic:a1 ws* "==" ws* arithmetic:a2 {Equals(:a1,:a2)}
    | '(' ws* or:or ws* ')' {:or};

operand = int | apply_var;
apply_var = apply | var;
var = (letter (letter | digit)*)$v {Var($v)};
int = digit+$d {Int(s2i($d))};
letter = 'a' - 'z' | 'A' - 'Z' | '_';
digit = ('0'-'9');
ws = ' ' | '\t' | '\n' | '\r';
program = '{' declaration*:decls '}' ws body:body {Program(:decls,:body)};

declaration = ws "VAR" ws var:v ws ':' ws type:t ';' {Declaration(:v,:t)};
type = "INT" {IntType()}
    | '[' type:t ']' {ArrayType(:t,IntType())}
    | '(' type:ind ws "ARRAY" ws "OF" ws type:val ')' {ArrayType(:val,:ind)};

body = assignment
    | test
    | '{' sequence+:s '}' {Sequence(:s)}
    | '{' body:b choice+:chs '}' {Choice(:b,:chs)}
    | iteration;
choice = ws 'U' ws body:b {:b};
sequence = ws body:b ';' ws {:b};
iteration = '{' body:b "}*" {Iteration(:b)};

assignment = var:v ws ":=" ws expr:e ';' {Assignment(:v,:e)};
expr = arithmetic | functional;

arithmetic = sub:s ws '+' ws arithmetic:a {Add(:s,:a)} | sub;
sub = prod:p subsub*:s {buildSub(:p,:s)}; 
subsub = ws '-' prod:p {:p};
prod = div:d ws '*' ws prod:p {Product(:d,:p)} | div;
div = neg:n subdiv*:d {buildDiv(:n,:d)};
subdiv = ws '/' neg:n {:n};
neg = ws '-' neg:n {Neg(:n)} | parentheses;
parentheses = ws '(' ws arithmetic:a ws ')' ws {:a} | operand;

functional = "APP(" var:array ',' ws? operand:index ')' {Apply(:array,:index)}
    | "UDP(" var:array ',' ws? operand:index ',' ws? operand:new_value {Update(:array,:index,:new_value)}; 

test = relation:r ws "?;" {Test(:r)};
or = and:and ws "||" ws or:or {Or(:and,:or)} | and;
and = not:not ws "&&" ws and:and {And(:not,:and)} | not;
not = '~' relation_atom:ra {Not(:ra)} | relation_atom;
relation_atom = arithmetic:a1 "<=" arithmetic:a2 {LesserEquals(:a1,:a2)}
    | arithmetic:a1 ">=" arithmetic:a2 {GreaterEquals(:a1,:a2)}
    | arithmetic:a1 '<' arithmetic:a2 {Lesser(:a1,:a2)}
    | arithmetic:a1 '>' arithmetic:a2 {Greater(:a1,:a2)}
    | arithmetic:a1 '=' arithmetic:a2 {Equals(:a1,:a2)}
    | '(' or:or ')' {:or};

operand = int | var;
var = (letter (letter | digit)*)$v {Var($v)};
int = digit+$d {Int(s2i($d))};
letter = 'a' - 'z' | 'A' - 'Z' | '_';
digit = ('0'-'9');
ws = ' ' | '\t' | '\n' | '\r';